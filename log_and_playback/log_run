#!/usr/bin/python
# -*- coding: utf-8 -*-

# This script starts up several log processes, then prompts the user at the end
# to choose a name for the resulting logs

import os
import re
import sys
import signal
import subprocess
import time
import tarfile
import datetime


# ---------------------------------------------------------------------------


# parameter name of the config files to save
config_files_param = (
  '/driving/velodyne/cal_file',
  '/driving/velodyne/int_file'
)

vlftopics = ["/driving/velodyne/packets"]
applanixtopics = ["/driving/ApplanixPose", "/driving/ApplanixGPS",
  "/driving/ApplanixRMS", "/driving/ApplanixDMI"]
cameratopics = ["/driving/ladybug/images", "/driving/fleaL/image_raw",
  "/driving/fleaL/camera_info", "/driving/grasshopperR/image_raw",
  "/driving/grasshopperR/camera_info"]
topicstoskip = ["/driving/velodyne/points", "/driving/velodyne/colored",
  "/driving/velodyne/points_agg", "/driving/velodyne/raw_scans",
  "/driving/smooth", "/tf", "/driving/trajectories",
  "/driving/perception/classification_result", "/driving/perception_velodyne"]

def skip_topic(t):
  if t.startswith("/driving/ladybug/") or t.startswith("/driving/fleaL") or \
    t.startswith("/driving/grasshopperR") or t.endswith("/bond") or \
    t.endswith("/parameter_descriptions") or t.endswith("/parameter_updates"):
    return True
  return False


# ---------------------------------------------------------------------------


# get and check the target directory
if len(sys.argv) != 2:
  print "Usage:", sys.argv[0], " /directory/to/save/to"
  sys.exit(0)
if not os.path.exists(sys.argv[1]):
  answer = raw_input("Target directory does not exist.  Create it? (y/N)")
  if answer.lower() == "y" or answer.lower() == "yes":
    os.makedirs(sys.argv[1])
  else:
    sys.exit(0)
else:
  subprocess.call("".join(("rm -rf ", sys.argv[1], "/tmplog*")), shell=True)


# ---------------------------------------------------------------------------


# separate topics into groups
rostopic = subprocess.Popen(["rostopic","list"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
alltopics = rostopic.communicate()[0].splitlines()
topicstoskip.extend( [t for t in alltopics if skip_topic(t)] )
generaltopics = list(set(alltopics)-set(topicstoskip)-set(vlftopics+applanixtopics+cameratopics))


# ---------------------------------------------------------------------------
# get the parameters and config files

# store in a tar.gz file
tar = tarfile.open("tmplog.tar.gz", "w:gz")

def get_param(name):
  ''' A helper function to retrieve parameters using rosparam. '''
  rosparam = subprocess.Popen(["rosparam","get",name], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  param_o = rosparam.communicate()[0].splitlines()
  if len(param_o)>1:
    raise KeyError("parameter " + name + " could not be resolved to a single value")
  elif len(param_o)==0:
    raise KeyError("parameter " + name + " could not be found")
  return param_o[0]

# save all the config files into the archive, with proper naming:
# name after the parameter name, replacing slashes by __
# and keep the original extension.
for p in config_files_param:
  try:
    cfg_file = get_param(p)
  except KeyError:
    rospy.logwarn("Failed to get param " + p)
    continue
  ext = os.path.splitext(cfg_file)[1]
  basename = '__'.join(p.strip('/').split('/'))
  tar.add(cfg_file, arcname=basename+ext)

subprocess.call(['rosparam', 'dump', 'params.yaml'])
tar.add('params.yaml')
os.remove('params.yaml')

tar.close()


# ---------------------------------------------------------------------------


# date stamp
now = datetime.datetime.now()
datestmp = now.strftime("%m-%d-%Y_%H-%M-%S")


# Create loggers
nullout = file('/dev/null', 'a+')
def makeLogger(name, topics):
  cmd = ["rosbag", "record", "-O", os.path.join(sys.argv[1],name)] + topics
  #print "Creating a new logger: " + " ".join(cmd)
  return subprocess.Popen(cmd, stdout=nullout, stderr=nullout)

loggerDefs = (("tmplog.velodyne", vlftopics), ("tmplog.applanix", applanixtopics), ("tmplog.cameras", cameratopics))
loggers = [makeLogger(*args) for args in loggerDefs]
if len(generaltopics)>0:
  loggers.append( makeLogger("tmplog", generaltopics) )


# ---------------------------------------------------------------------------


def rename_bag_files(name):
  active = True
  while active:
    files = os.listdir(sys.argv[1])
    active = False
    for f in files:
      if f.startswith("tmplog") and f.endswith('bag.active'):
        active = True
    if active:
      time.sleep(1)

  files = os.listdir(sys.argv[1])
  for f in files:
    if f.startswith("tmplog") and (f.endswith('bag') or f.endswith('tar.gz')):
      s = os.path.join(sys.argv[1], f)
      d = os.path.join(sys.argv[1], name + '-' + datestmp + f[6:])
      os.rename(s,d)



def exithandler(signum, frame):
  for logger in loggers:
    if logger.returncode == None:
     logger.send_signal(signal.SIGINT)
  print "\nExiting"
  name = None
  while name is None:
    name = raw_input("Please give a name (blank to ignore log):")
    if name != None and re.search("[^0-9a-zA-Z_\-]", name):
      print "Invalid character in file name!"
      name = None
  if name != "":
    rename_bag_files(name)
    generalbag = os.path.join(sys.argv[1], "%s-%s.bag" % (name, datestmp))
    subprocess.call(['rosrun', 'log_and_playback', 'wiki_annotate', generalbag])
  sys.exit(0)
  return

signal.signal(signal.SIGINT, exithandler)


# ---------------------------------------------------------------------------


starttime = time.time();
while True:
  time.sleep(1)
  curtime = time.time();
  diff = time.gmtime(curtime - starttime);
  sys.stdout.write("                                                \r")
  sys.stdout.write("Logfile time elapsed " + time.strftime("%H:%M:%S",diff) + "\r")
  sys.stdout.flush()
  for logger in loggers:
    logger.poll()
    if logger.returncode is not None:
      print "Logfile died!  Cleaning up..."
      exithandler(None,None)
