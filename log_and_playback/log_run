#!/usr/bin/python
# -*- coding: utf-8 -*-

# This script starts up several log processes, then prompts the user at the end
# to choose a name for the resulting logs

import os
import re
import sys
import signal
import subprocess
import time
import datetime

def rename_bag_files(name):
  active = True
  while active:
    files = os.listdir(sys.argv[1])
    active = False
    for f in files:
      if f.startswith("tmplog") and f.endswith('bag.active'):
        active = True
    if active:
      time.sleep(1)
        
  files = os.listdir(sys.argv[1])
  for f in files:
    if f.startswith("tmplog") and f.endswith('bag'):
      s = "".join([sys.argv[1], "/", f])
      d = "".join([sys.argv[1], "/", name, '-', datestmp, f[6:]])
      os.rename(s,d)


# get and check the target directory
if len(sys.argv) != 2:
  print "Usage:", sys.argv[0], " /directory/to/save/to"
  sys.exit(0)
if not os.path.exists(sys.argv[1]):
  answer = raw_input("Target directory does not exist.  Create it? (y/N)")
  if answer.lower() == "y" or answer.lower() == "yes":
    os.makedirs(sys.argv[1])
  else:
    sys.exit(0)
else:
  subprocess.call("".join(("rm -rf ", sys.argv[1], "/tmplog*")), shell=True)


# separate topics into groups
rostopic = subprocess.Popen(["rostopic","list"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
alltopics = rostopic.communicate()[0].splitlines()
vlftopics = ["/driving/velodyne/packets"]
applanixtopics = ["/driving/ApplanixPose", "/driving/ApplanixGPS", "/driving/ApplanixRMS", "/driving/ApplanixDMI"]
ladybugtopics = ["/driving/ladybug/images"]
topicstoskip = ["/driving/velodyne/points", "/driving/velodyne/colored", "/driving/velodyne/points_agg", "/driving/smooth", "/tf", "/driving/perception/classification_result"] \
  + [t for t in alltopics if t.startswith("/driving/ladybug/")] \
  + [t for t in alltopics if t.endswith("/bond")]

generaltopics = list(set(alltopics)-set(topicstoskip)-set(vlftopics+applanixtopics+ladybugtopics))


# date stamp
now = datetime.datetime.now()
datestmp = now.strftime("%m-%d-%Y_%H-%M-%S")


# Create loggers
nullout = file('/dev/null', 'a+')
def makeLogger(name, topics):
  cmd = ["rosbag", "record", "-O", os.path.join(sys.argv[1],name)] + topics
  #print "Creating a new logger: " + " ".join(cmd)
  return subprocess.Popen(cmd, stdout=nullout, stderr=nullout)

loggerDefs = (("tmplog.velodyne", vlftopics), ("tmplog.applanix", applanixtopics), ("tmplog.ladybug", ladybugtopics))
loggers = [makeLogger(*args) for args in loggerDefs]
if len(generaltopics)>0:
  loggers.append( makeLogger("tmplog", generaltopics) )


def exithandler(signum, frame):
  for logger in loggers:
    if logger.returncode == None:
     logger.send_signal(signal.SIGINT)
  print "\nExiting"
  name = None
  while name is None:
    name = raw_input("Please give a name (blank to ignore log):")
    if name != None and re.search("[^0-9a-zA-Z_\-]", name):
      print "Invalid character in file name!"
      name = None
  if name != "":
    rename_bag_files(name)
  sys.exit(0)
  return

signal.signal(signal.SIGINT, exithandler)


starttime = time.time();
while True:
  time.sleep(1)
  curtime = time.time();
  diff = time.gmtime(curtime - starttime);
  sys.stdout.write("                                                \r")
  sys.stdout.write("".join(("Logfile time elapsed ", \
      time.strftime("%H:%M:%S",diff), "\r")))
  sys.stdout.flush()
  for logger in loggers:
    logger.poll()
    if logger.returncode is not None:
      print "Logfile died!  Cleaning up..."
      exithandler(None,None)
